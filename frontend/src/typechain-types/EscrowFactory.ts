/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EscrowFactoryInterface extends utils.Interface {
  functions: {
    "createEscrow(address,address)": FunctionFragment;
    "escrows(uint256)": FunctionFragment;
    "getEscrows()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createEscrow" | "escrows" | "getEscrows"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrows",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEscrows", data: BytesLike): Result;

  events: {
    "EscrowCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowCreated"): EventFragment;
}

export interface EscrowCreatedEventObject {
  newEscrow: string;
}
export type EscrowCreatedEvent = TypedEvent<[string], EscrowCreatedEventObject>;

export type EscrowCreatedEventFilter = TypedEventFilter<EscrowCreatedEvent>;

export interface EscrowFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createEscrow(
      _arbiter: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEscrows(overrides?: CallOverrides): Promise<[string[]]>;
  };

  createEscrow(
    _arbiter: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrows(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEscrows(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    createEscrow(
      _arbiter: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEscrows(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "EscrowCreated(address)"(newEscrow?: null): EscrowCreatedEventFilter;
    EscrowCreated(newEscrow?: null): EscrowCreatedEventFilter;
  };

  estimateGas: {
    createEscrow(
      _arbiter: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrows(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createEscrow(
      _arbiter: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
